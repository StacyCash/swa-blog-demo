@page "/blogposts/{id}/edit"
@using Microsoft.AspNetCore.Authorization
@using Models
@attribute [Authorize(Roles = "admin")]
@inject BlogPostService service
@inject NavigationManager navigationManager

<AuthorizeView Roles="admin">
	<Authorized>

	@if (blogPost is null)
	{
		<div>Loading...</div>
	}
	else
	{
		<EditForm Model="blogPost" OnValidSubmit="Save" Context="EditContext">
			<div>
				<div>Title</div>
				<div><InputText @bind-Value=blogPost.Title /></div>
			</div>
			<div>
				<div>Tags</div>
				<div><InputText @bind-Value=tags /></div>
			</div>
			<div>
				<div>Post</div>
				<div>
					<InputTextArea @bind-Value=blogPost.BlogPostMarkdown
								   style=" width: 100%; height: 60vh; min-height: 100px;" />
				</div>
			</div>
			<button type="submit">Save</button>

		</EditForm>
	}
	</Authorized>
</AuthorizeView>

@code
{
    private BlogPost? blogPost;
    private string mode = "edit";
    private string tags = string.Empty;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == "new"){
            mode = "create";
            blogPost = new ();
            return;
        }

        if (!Guid.TryParse(Id, out Guid id))
        {
            throw new InvalidCastException();
        }

        blogPost = await service.GetBlogPost(id);
        tags = String.Join(", ", blogPost!.Tags!.CleanTags());
    }

    private async void Save()
    {
        blogPost!.Tags = tags.Split(',').CleanTags();

        if (mode == "create")
        {
            blogPost.PublishedDate = DateTime.Now;
            blogPost.Id = await service.Create(blogPost);
        }
        else
        {
            await service.Update(blogPost);
        }

        navigationManager.NavigateTo($"blogposts/{blogPost.Id}");
    }
}
