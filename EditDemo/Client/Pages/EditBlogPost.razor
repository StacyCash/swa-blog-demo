@page "/blogposts/{id}/edit"
@using Microsoft.AspNetCore.Authorization
@using Models
@attribute [Authorize(Roles = "admin")]
@inject BlogPostService service
@inject NavigationManager navigationManager;
    <AuthorizeView Roles="admin">
        <Authorized>

@if (blogPost is null)
{
    <div>Loading...</div>
}
else
{
	<EditForm Model="blogPost" OnValidSubmit="Save">
		<div>
			<div>Title</div>
			<div><InputText @bind-Value=blogPost.Title /></div>
		</div>
		<div>
			<div>Author</div>
			<div><InputText @bind-Value=blogPost.Author /></div>
		</div>
		<div>
			<div>Tags</div>
			<div><InputText @bind-Value=tags /></div>
		</div>
		<div>
			<div>Post</div>
			<div><InputTextArea @bind-Value=blogPost.BlogPostMarkdown /></div>
		</div>
		<button type="submit">Save</button>

	</EditForm>
}
        </Authorized>
    </AuthorizeView>

@code
{
	private BlogPost blogPost;
	private string mode = "edit";
	private string tags = string.Empty;

	[Parameter] 
	public string Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (Id == "new"){
			mode = "create";
			blogPost = new ();
			return;
		}

		if (!Guid.TryParse(Id, out Guid id))
		{
			throw new InvalidCastException();
		}

		blogPost = await service.GetBlogPost(id);

		blogPost.Tags = blogPost.Tags.Where(x => !string.IsNullOrEmpty(x)).ToArray();
		blogPost.Tags.ToList().ForEach(t => tags += $"{t}, ");
	}

	private async void Save()
	{
		blogPost.Tags = tags.Split(", ").Where(x => !string.IsNullOrEmpty(x)).ToArray();

		if (mode == "create")
		{
			blogPost.PublishedDate = DateTime.Now;
			blogPost.Id = await service.CreateBlogPost(blogPost);
		}
		else
		{
			await service.UpdateBlogPost(blogPost);
		}

		navigationManager.NavigateTo($"blogposts/{blogPost.Id}");
	}
}
